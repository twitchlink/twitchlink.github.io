name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the main branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    environment: github-pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate env file from variables
        run: |
          echo "NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}" >> .env.local
          echo "NEXT_PUBLIC_APP_NAME=${{ vars.NEXT_PUBLIC_APP_NAME }}" >> .env.local
          echo "NEXT_PUBLIC_DEVELOPER_NAME=${{ vars.NEXT_PUBLIC_DEVELOPER_NAME }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_REPOSITORY_NAME=${{ vars.NEXT_PUBLIC_GITHUB_REPOSITORY_NAME }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_REPOSITORY_DESCRIPTION=${{ vars.NEXT_PUBLIC_GITHUB_REPOSITORY_DESCRIPTION }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_URL=${{ vars.NEXT_PUBLIC_GITHUB_URL }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_CREATE_ISSUE_URL=${{ vars.NEXT_PUBLIC_GITHUB_CREATE_ISSUE_URL }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_FEATURE_REQUEST_URL=${{ vars.NEXT_PUBLIC_GITHUB_FEATURE_REQUEST_URL }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_DISCUSSIONS_URL=${{ vars.NEXT_PUBLIC_GITHUB_DISCUSSIONS_URL }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_RELEASE_DOWNLOAD_URL=${{ vars.NEXT_PUBLIC_GITHUB_RELEASE_DOWNLOAD_URL }}" >> .env.local
          echo "NEXT_PUBLIC_GITHUB_RELEASE_TAG_URL=${{ vars.NEXT_PUBLIC_GITHUB_RELEASE_TAG_URL }}" >> .env.local
          echo "NEXT_PUBLIC_SUPPORT_EMAIL=${{ vars.NEXT_PUBLIC_SUPPORT_EMAIL }}" >> .env.local
          echo "NEXT_PUBLIC_SUPPORT_DISCORD_URL=${{ vars.NEXT_PUBLIC_SUPPORT_DISCORD_URL }}" >> .env.local
          echo "NEXT_PUBLIC_DONATE_BUY_ME_A_COFFEE_URL=${{ vars.NEXT_PUBLIC_DONATE_BUY_ME_A_COFFEE_URL }}" >> .env.local
          echo "NEXT_PUBLIC_DONATE_PAYPAL_URL=${{ vars.NEXT_PUBLIC_DONATE_PAYPAL_URL }}" >> .env.local
          echo "NEXT_PUBLIC_DONATE_TOONATION_URL=${{ vars.NEXT_PUBLIC_DONATE_TOONATION_URL }}" >> .env.local
          echo "NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}" >> .env.local
          echo "NEXT_PUBLIC_GOOGLE_ADSENSE_ID=${{ vars.NEXT_PUBLIC_GOOGLE_ADSENSE_ID }}" >> .env.local

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Setup Pages
        id: setup_pages
        uses: actions/configure-pages@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: Build with Next.js
        run: yarn build
        env:
          PAGES_BASE_PATH: ${{ steps.setup_pages.outputs.base_path }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
